<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotBeSecured" xml:space="preserve">
    <value>Remoting channel can not be secured: {0}</value>
  </data>
  <data name="CannotCreateChannelSink" xml:space="preserve">
    <value>Can not create channel sink for remote url: {0}</value>
  </data>
  <data name="ChannelNameAlreadyRegistered" xml:space="preserve">
    <value>Remoting channel has already been registered: {0}</value>
  </data>
  <data name="InvalidCast" xml:space="preserve">
    <value>Invalid Cast From {0} To {1}</value>
  </data>
  <data name="InvalidUrl" xml:space="preserve">
    <value>Invalid url {0}</value>
  </data>
  <data name="NotMarkedForSerialization" xml:space="preserve">
    <value>{0} is missing the serialization attribute in {1}.</value>
  </data>
  <data name="NotRemotableByReference" xml:space="preserve">
    <value>Type is not remotable by reference: {0}</value>
  </data>
  <data name="SerializationArrayType" xml:space="preserve">
    <value>Serialization array type is not supported: {0}</value>
  </data>
  <data name="SerializationArrayTypeObjectNotInitialized" xml:space="preserve">
    <value>Array type is not initialized.</value>
  </data>
  <data name="SerializationAssemblyId" xml:space="preserve">
    <value>Assembly ID: {0}</value>
  </data>
  <data name="SerializationAssemblyNotFound" xml:space="preserve">
    <value>Assembly not found: {0}</value>
  </data>
  <data name="SerializationBinaryHeader" xml:space="preserve">
    <value>Binary Header Issue: {0} value not mapped</value>
  </data>
  <data name="SerializationCrossDomainError" xml:space="preserve">
    <value>Process Boundary Error: {0} - {1}</value>
  </data>
  <data name="SerializationInvalidFormat" xml:space="preserve">
    <value>Invalid Format: {0}</value>
  </data>
  <data name="SerializationMap" xml:space="preserve">
    <value>The serialization map is missing: {0}</value>
  </data>
  <data name="SerializationMemberInfo" xml:space="preserve">
    <value>Serialization Member Information: {0}</value>
  </data>
  <data name="SerializationMissingMember" xml:space="preserve">
    <value>Missing Member: {0}, {1}, {2}</value>
  </data>
  <data name="SerializationNoMemberInfo" xml:space="preserve">
    <value>No Member Information: {0} {1}</value>
  </data>
  <data name="SerializationNoObjectID" xml:space="preserve">
    <value>No Object ID: {0}</value>
  </data>
  <data name="SerializationObjectTypeEnum" xml:space="preserve">
    <value>ObjectTypeEnum: {0}</value>
  </data>
  <data name="SerializationParseError" xml:space="preserve">
    <value>Parse Error: {0}</value>
  </data>
  <data name="SerializationReadBeyondEOF" xml:space="preserve">
    <value>Read beyond EOF</value>
  </data>
  <data name="SerializationStreamEnd" xml:space="preserve">
    <value>This stream has come to pre-mature end.</value>
  </data>
  <data name="SerializationTopObjectMissing" xml:space="preserve">
    <value>Top Object Is Missing</value>
  </data>
  <data name="SerializationTopObjectNotInstanciated" xml:space="preserve">
    <value>Object is not initialized: {0}</value>
  </data>
  <data name="SerializationTypeCode" xml:space="preserve">
    <value>Type Code Error: {0}</value>
  </data>
  <data name="SerializationTypeExpected" xml:space="preserve">
    <value>Type was expected.</value>
  </data>
  <data name="SerializationTypeMissing" xml:space="preserve">
    <value>Type Missing: {0}</value>
  </data>
  <data name="SerializationTypeRead" xml:space="preserve">
    <value>Type Read: {0}</value>
  </data>
  <data name="SerializationTypeWrite" xml:space="preserve">
    <value>Type Write: {0}</value>
  </data>
  <data name="SerializationXmlElement" xml:space="preserve">
    <value>Xml Element Unknown: {0}</value>
  </data>
  <data name="Serialization_ISerializableTypes" xml:space="preserve">
    <value>Serializable Types: {0}</value>
  </data>
  <data name="SetObjectUriForMarshal__UriExists" xml:space="preserve">
    <value>Uri already exists: {0}</value>
  </data>
  <data name="ThBinaryStreamHasBeenCorrupted" xml:space="preserve">
    <value>The binary stream has been corrupted.</value>
  </data>
</root>